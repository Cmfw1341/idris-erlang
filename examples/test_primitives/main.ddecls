(Prelude.Classes.==,DFun Prelude.Classes.== [{e0},{e1}] GLOB {e1})
(Force,DFun Force [{e0},{e1},{e2}] let {in0} = {EVAL0}(GLOB {e2}) in GLOB {in0})
(Prelude.Bool.boolElim,DFun Prelude.Bool.boolElim [{e0},{e1},{e2},{e3}] case GLOB {e1} of {
	Prelude.Bool.False() => {EVAL0}(GLOB {e3})
	| Prelude.Bool.True() => {EVAL0}(GLOB {e2})}
)
(Prelude.closeFile,DFun Prelude.closeFile [{e0}] {U_io_bind1}(____, ____, ____, {U_prim_fclose1}(GLOB {e0}), {U_Prelude.{closeFile0}1}()))
(Prelude.feof,DFun Prelude.feof [{e0}] {U_io_bind1}(____, ____, ____, {U_prim_feof1}(GLOB {e0}), {U_Prelude.{feof0}1}()))
(Prelude.fgetc,DFun Prelude.fgetc [{e0}] {U_io_bind1}(____, ____, ____, {U_prim_fgetc1}(GLOB {e0}), {U_Prelude.{fgetc0}1}()))
(Prelude.fopen,DFun Prelude.fopen [{e0},{e1}] {U_io_bind1}(____, ____, ____, {U_prim_fopen1}(GLOB {e0}, GLOB {e1}), {U_Prelude.{fopen0}1}()))
(Prelude.fread,DFun Prelude.fread [{e0}] {U_prim_fread1}(GLOB {e0}))
(Prelude.fwrite,DFun Prelude.fwrite [{e0},{e1}] {U_io_bind1}(____, ____, ____, {U_prim_fprint1}(GLOB {e0}, GLOB {e1}), {U_Prelude.{fwrite0}1}()))
(Prelude.Classes.intToBool,DFun Prelude.Classes.intToBool [{e0}] case GLOB {e0} of {
	0 => CON Prelude.Bool.False()
	| _ => CON Prelude.Bool.True()}
)
(io_bind,DFun io_bind [{e0},{e1},{e2},{e3},{e4},w] {APPLY0}({io_bind2}(GLOB {e0}, GLOB {e1}, GLOB {e2}, GLOB {e3}, GLOB {e4}, GLOB w), {APPLY0}(GLOB {e3}, GLOB w)))
(io_return,DFun io_return [{e0},{e1},{e2},w] GLOB {e2})
(Main.main,DFun Main.main [] {U_io_bind1}(____, ____, ____, Main.testFiles(), {U_Main.{main0}1}()))
(mkForeignPrim,DFun mkForeignPrim [] ____)
(Prelude.Bool.not,DFun Prelude.Bool.not [{e0}] case GLOB {e0} of {
	Prelude.Bool.False() => CON Prelude.Bool.True()
	| Prelude.Bool.True() => CON Prelude.Bool.False()}
)
(Prelude.nullStr,DFun Prelude.nullStr [{e0}] {U_io_bind1}(____, ____, ____, {U_prim_strIsNull1}(GLOB {e0}), {U_Prelude.{nullStr0}1}()))
(prim__concat,DFun prim__concat [{op0},{op1}] LStrConcat(GLOB {op0}, GLOB {op1}))
(prim__eqInt,DFun prim__eqInt [{op0},{op1}] LEq (ATInt ITNative)(GLOB {op0}, GLOB {op1}))
(prim__fileClose,DFun prim__fileClose [{op0},{op1}] LFileClose(GLOB {op0}, GLOB {op1}))
(prim__fileEOF,DFun prim__fileEOF [{op0},{op1}] LFileEOF(GLOB {op0}, GLOB {op1}))
(prim__fileOpen,DFun prim__fileOpen [{op0},{op1},{op2}] LFileOpen(GLOB {op0}, GLOB {op1}, GLOB {op2}))
(prim__intToChar,DFun prim__intToChar [{op0}] LIntCh ITNative(GLOB {op0}))
(prim__printString,DFun prim__printString [{op0},{op1},{op2}] LPrintStr(GLOB {op0}, GLOB {op1}, GLOB {op2}))
(prim__readChar,DFun prim__readChar [{op0},{op1}] LReadChar(GLOB {op0}, GLOB {op1}))
(prim__readString,DFun prim__readString [{op0},{op1}] LReadStr(GLOB {op0}, GLOB {op1}))
(prim__stdout,DFun prim__stdout [] LStdOut())
(prim__strCons,DFun prim__strCons [{op0},{op1}] LStrCons(GLOB {op0}, GLOB {op1}))
(prim__strIsNull,DFun prim__strIsNull [{op0},{op1}] LStrNull(GLOB {op0}, GLOB {op1}))
(prim_fclose,DFun prim_fclose [{e0},w] LFileClose(GLOB w, GLOB {e0}))
(prim_feof,DFun prim_feof [{e0},w] LFileEOF(GLOB w, GLOB {e0}))
(prim_fgetc,DFun prim_fgetc [{e0},w] LReadChar(GLOB w, GLOB {e0}))
(prim_fopen,DFun prim_fopen [{e0},{e1},w] LFileOpen(GLOB w, GLOB {e0}, GLOB {e1}))
(prim_fprint,DFun prim_fprint [{e0},{e1},w] LPrintStr(GLOB w, GLOB {e0}, GLOB {e1}))
(prim_fread,DFun prim_fread [{e0},w] LReadStr(GLOB w, GLOB {e0}))
(prim_io_bind,DFun prim_io_bind [{e0},{e1},{e2},{e3}] {APPLY0}(GLOB {e3}, GLOB {e2}))
(prim_strIsNull,DFun prim_strIsNull [{e0},w] LStrNull(GLOB w, GLOB {e0}))
(run__IO,DFun run__IO [{e0},{e1}] {APPLY0}(GLOB {e1}, ____))
(Main.testFiles,DFun Main.testFiles [] {U_io_bind1}(____, ____, ____, Prelude.fwrite(prim__stdout(), "testFiles\n"), {U_Main.{testFiles10}1}()))
(Main.testStrings,DFun Main.testStrings [] {U_io_bind1}(____, ____, ____, Prelude.fwrite(prim__stdout(), "testStrings\n"), {U_Main.{testStrings2}1}()))
(unsafePerformPrimIO,DFun unsafePerformPrimIO [] ____)
(world,DFun world [{e0}] GLOB {e0})
({APPLY0},DFun {APPLY0} [{fn0},{arg0}] case' GLOB {fn0} of {
	{U_Main.{main0}1}() => Main.{main0}(GLOB {arg0})
	| {U_Main.{testFiles0}1}({P_c0}) => Main.{testFiles0}(GLOB {P_c0}, GLOB {arg0})
	| {U_Main.{testFiles10}1}() => Main.{testFiles10}(GLOB {arg0})
	| {U_Main.{testFiles1}1}() => Main.{testFiles1}(GLOB {arg0})
	| {U_Main.{testFiles2}1}() => Main.{testFiles2}(GLOB {arg0})
	| {U_Main.{testFiles3}1}({P_c0}) => Main.{testFiles3}(GLOB {P_c0}, GLOB {arg0})
	| {U_Main.{testFiles4}1}({P_c0}) => Main.{testFiles4}(GLOB {P_c0}, GLOB {arg0})
	| {U_Main.{testFiles5}1}({P_c0}) => Main.{testFiles5}(GLOB {P_c0}, GLOB {arg0})
	| {U_Main.{testFiles6}1}({P_c0}) => Main.{testFiles6}(GLOB {P_c0}, GLOB {arg0})
	| {U_Main.{testFiles7}1}({P_c0}) => Main.{testFiles7}(GLOB {P_c0}, GLOB {arg0})
	| {U_Main.{testFiles8}1}({P_c0}) => Main.{testFiles8}(GLOB {P_c0}, GLOB {arg0})
	| {U_Main.{testFiles9}1}() => Main.{testFiles9}(GLOB {arg0})
	| {U_Main.{testStrings0}1}() => Main.{testStrings0}(GLOB {arg0})
	| {U_Main.{testStrings1}1}() => Main.{testStrings1}(GLOB {arg0})
	| {U_Main.{testStrings2}1}() => Main.{testStrings2}(GLOB {arg0})
	| {U_Prelude.Classes.Int instance of Prelude.Classes.Eq1}({P_c0}) => Prelude.Classes.Int instance of Prelude.Classes.Eq(GLOB {P_c0}, GLOB {arg0})
	| {U_Prelude.{closeFile0}1}() => Prelude.{closeFile0}(GLOB {arg0})
	| {U_Prelude.{feof0}1}() => Prelude.{feof0}(GLOB {arg0})
	| {U_Prelude.{fgetc0}1}() => Prelude.{fgetc0}(GLOB {arg0})
	| {U_Prelude.{fopen0}1}() => Prelude.{fopen0}(GLOB {arg0})
	| {U_Prelude.{fwrite0}1}() => Prelude.{fwrite0}(GLOB {arg0})
	| {U_Prelude.{nullStr0}1}() => Prelude.{nullStr0}(GLOB {arg0})
	| {U_io_bind1}({P_c0}, {P_c1}, {P_c2}, {P_c3}, {P_c4}) => io_bind(GLOB {P_c0}, GLOB {P_c1}, GLOB {P_c2}, GLOB {P_c3}, GLOB {P_c4}, GLOB {arg0})
	| {U_io_return1}({P_c0}, {P_c1}, {P_c2}) => io_return(GLOB {P_c0}, GLOB {P_c1}, GLOB {P_c2}, GLOB {arg0})
	| {U_prim_fclose1}({P_c0}) => prim_fclose(GLOB {P_c0}, GLOB {arg0})
	| {U_prim_feof1}({P_c0}) => prim_feof(GLOB {P_c0}, GLOB {arg0})
	| {U_prim_fgetc1}({P_c0}) => prim_fgetc(GLOB {P_c0}, GLOB {arg0})
	| {U_prim_fopen1}({P_c0}, {P_c1}) => prim_fopen(GLOB {P_c0}, GLOB {P_c1}, GLOB {arg0})
	| {U_prim_fprint1}({P_c0}, {P_c1}) => prim_fprint(GLOB {P_c0}, GLOB {P_c1}, GLOB {arg0})
	| {U_prim_fread1}({P_c0}) => prim_fread(GLOB {P_c0}, GLOB {arg0})
	| {U_prim_strIsNull1}({P_c0}) => prim_strIsNull(GLOB {P_c0}, GLOB {arg0})
	| {U_{io_bind1}1}({P_c0}, {P_c1}, {P_c2}, {P_c3}, {P_c4}, {P_c5}) => {io_bind1}(GLOB {P_c0}, GLOB {P_c1}, GLOB {P_c2}, GLOB {P_c3}, GLOB {P_c4}, GLOB {P_c5}, GLOB {arg0})
	| {U_Prelude.Classes.Int instance of Prelude.Classes.Eq2}() => {U_Prelude.Classes.Int instance of Prelude.Classes.Eq1}(GLOB {arg0})
	| _ => ____}
)
({EVAL0},DFun {EVAL0} [{arg0}] case' GLOB {arg0} of {
	_ => GLOB {arg0}}
)
(Prelude.{closeFile0},DFun Prelude.{closeFile0} [{in0}] {U_io_return1}(____, ____, CON MkUnit()))
(Prelude.{feof0},DFun Prelude.{feof0} [{in0}] {U_io_return1}(____, ____, case case LEq (ATInt ITNative)(GLOB {in0}, 0) of {
	0 => CON Prelude.Bool.False()
	| _ => CON Prelude.Bool.True()}
 of {
	Prelude.Bool.False() => CON Prelude.Bool.True()
	| Prelude.Bool.True() => CON Prelude.Bool.False()}
))
(Prelude.{fgetc0},DFun Prelude.{fgetc0} [{in0}] {U_io_return1}(____, ____, LIntCh ITNative(GLOB {in0})))
(Prelude.{fopen0},DFun Prelude.{fopen0} [{in0}] {U_io_return1}(____, ____, GLOB {in0}))
(Prelude.{fwrite0},DFun Prelude.{fwrite0} [{in0}] {U_io_return1}(____, ____, CON MkUnit()))
({io_bind0},DFun {io_bind0} [{e0},{e1},{e2},{e3},{e4},w,{in0}] {APPLY0}(GLOB {e4}, GLOB {in0}))
(Main.{main0},DFun Main.{main0} [{in0}] Main.testStrings())
(Prelude.{nullStr0},DFun Prelude.{nullStr0} [{in0}] {U_io_return1}(____, ____, case {APPLY0}({APPLY0}(Prelude.Classes.==(____, {U_Prelude.Classes.Int instance of Prelude.Classes.Eq2}()), GLOB {in0}), 0) of {
	Prelude.Bool.False() => CON Prelude.Bool.True()
	| Prelude.Bool.True() => CON Prelude.Bool.False()}
))
({runMain0},DFun {runMain0} [] {EVAL0}({APPLY0}(Main.main(), ____)))
(Main.{testFiles0},DFun Main.{testFiles0} [{in9},{in10}] Prelude.closeFile(GLOB {in9}))
(Main.{testStrings0},DFun Main.{testStrings0} [{in2}] case GLOB {in2} of {
	Prelude.Bool.False() => Prelude.fwrite(prim__stdout(), "not null\n")
	| Prelude.Bool.True() => Prelude.fwrite(prim__stdout(), "null\n")}
)
({io_bind1},DFun {io_bind1} [{e0},{e1},{e2},{e3},{e4},w,{in0}] {APPLY0}({io_bind0}(GLOB {e0}, GLOB {e1}, GLOB {e2}, GLOB {e3}, GLOB {e4}, GLOB w, GLOB {in0}), GLOB w))
(Main.{testFiles1},DFun Main.{testFiles1} [{in9}] {U_io_bind1}(____, ____, ____, Prelude.fwrite(GLOB {in9}, "test"), {U_Main.{testFiles0}1}(GLOB {in9})))
(Main.{testStrings1},DFun Main.{testStrings1} [{in1}] {U_io_bind1}(____, ____, ____, Prelude.nullStr(GLOB {in1}), {U_Main.{testStrings0}1}()))
({io_bind2},DFun {io_bind2} [{e0},{e1},{e2},{e3},{e4},w] {U_{io_bind1}1}(GLOB {e0}, GLOB {e1}, GLOB {e2}, GLOB {e3}, GLOB {e4}, GLOB w))
(Main.{testFiles2},DFun Main.{testFiles2} [{in8}] {U_io_bind1}(____, ____, ____, Prelude.fopen("other_file", "w"), {U_Main.{testFiles1}1}()))
(Main.{testStrings2},DFun Main.{testStrings2} [{in0}] {U_io_bind1}(____, ____, ____, {U_io_return1}(____, ____, ""), {U_Main.{testStrings1}1}()))
(Main.{testFiles3},DFun Main.{testFiles3} [{in1},{in7}] {U_io_bind1}(____, ____, ____, Prelude.closeFile(GLOB {in1}), {U_Main.{testFiles2}1}()))
(Main.{testFiles4},DFun Main.{testFiles4} [{in1},{in6}] {U_io_bind1}(____, ____, ____, case GLOB {in6} of {
	Prelude.Bool.False() => Prelude.fwrite(prim__stdout(), "Not EOF\n")
	| Prelude.Bool.True() => Prelude.fwrite(prim__stdout(), "EOF\n")}
, {U_Main.{testFiles3}1}(GLOB {in1})))
(Main.{testFiles5},DFun Main.{testFiles5} [{in1},{in5}] {U_io_bind1}(____, ____, ____, Prelude.feof(GLOB {in1}), {U_Main.{testFiles4}1}(GLOB {in1})))
(Main.{testFiles6},DFun Main.{testFiles6} [{in1},{in4}] {U_io_bind1}(____, ____, ____, Prelude.fwrite(prim__stdout(), LStrConcat(LStrConcat("read from file: ", GLOB {in4}), "\n")), {U_Main.{testFiles5}1}(GLOB {in1})))
(Main.{testFiles7},DFun Main.{testFiles7} [{in1},{in3}] {U_io_bind1}(____, ____, ____, {U_prim_fread1}(GLOB {in1}), {U_Main.{testFiles6}1}(GLOB {in1})))
(Main.{testFiles8},DFun Main.{testFiles8} [{in1},{in2}] {U_io_bind1}(____, ____, ____, Prelude.fwrite(prim__stdout(), LStrConcat(LStrConcat("read char from file: ", LStrCons(GLOB {in2}, "")), "\n")), {U_Main.{testFiles7}1}(GLOB {in1})))
(Main.{testFiles9},DFun Main.{testFiles9} [{in1}] {U_io_bind1}(____, ____, ____, Prelude.fgetc(GLOB {in1}), {U_Main.{testFiles8}1}(GLOB {in1})))
(Main.{testFiles10},DFun Main.{testFiles10} [{in0}] {U_io_bind1}(____, ____, ____, Prelude.fopen("test_file", "r"), {U_Main.{testFiles9}1}()))
(Decidable.Equality.Decidable.Equality.Char instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq,DFun Decidable.Equality.Decidable.Equality.Char instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq [] ____)
(Decidable.Equality.Decidable.Equality.Float instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq,DFun Decidable.Equality.Decidable.Equality.Float instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq [] ____)
(Decidable.Equality.Decidable.Equality.Int instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq,DFun Decidable.Equality.Decidable.Equality.Int instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq [] ____)
(Decidable.Equality.Decidable.Equality.Integer instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq,DFun Decidable.Equality.Decidable.Equality.Integer instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq [] ____)
(Decidable.Equality.Decidable.Equality.String instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq,DFun Decidable.Equality.Decidable.Equality.String instance of Decidable.Equality.DecEq, method decEq, primitiveNotEq [] ____)
(Prelude.Classes.Int instance of Prelude.Classes.Eq,DFun Prelude.Classes.Int instance of Prelude.Classes.Eq [{meth0},{meth1}] case LEq (ATInt ITNative)(GLOB {meth0}, GLOB {meth1}) of {
	0 => CON Prelude.Bool.False()
	| _ => CON Prelude.Bool.True()}
)
(case block in Void,DFun case block in Void [] ____)
(case block in io_bind,DFun case block in io_bind [{e0},{e1},{e2},{e3},{e4},{e5},{e6},{e7}] {APPLY0}(GLOB {e7}, GLOB {e5}))
(<<Void eliminator>>,DFun <<Void eliminator>> [] ____)
Compilation Succeeded: main.erl
