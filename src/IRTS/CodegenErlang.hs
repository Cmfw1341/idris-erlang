module IRTS.CodegenErlang (codegenErlang) where

import Idris.Core.TT
import IRTS.Lang
import IRTS.CodegenCommon
import IRTS.Defunctionalise

import Control.Applicative ((<$>),(<*>))
import Control.Monad.Error
import Control.Monad.Trans.State
import Data.Char (isPrint, toUpper, isUpper, isLower, isDigit, isAlpha)
import Data.List (intercalate, insertBy, partition)
import Data.Ord (comparing)
import System.Exit (exitSuccess,exitFailure)

-- Everything happens in here. I think. Wait, no, everything actually
-- happens in `generateErl`. This is just a bit of glue code.
codegenErlang :: CodeGenerator
codegenErlang ci = do let outfile = outputFile ci
                      eitherEcg <- runErlCodeGen generateErl (defunDecls ci)
                      case eitherEcg of
                        Left error -> do putStrLn ("Error: " ++ error)
                                         exitFailure
                        Right ecg -> do let erlout = header outfile ++ (forms ecg) ++ [""]
                                        --mapM_ print (decls ecg)
                                        writeFile outfile ("\n" `intercalate` erlout)
                                        putStrLn ("Compilation Succeeded: " ++ outfile)
                                        exitSuccess

-- Erlang files have to have a `-module().` annotation that matches
-- their filename (without the extension). Given we're making this, we
-- should be curteous and give coders a warning that this file was
-- autogenerated, rather than hand-coded.
header :: String -> [String]
header filename = ["% Generated by the Idris -> Erlang Compiler.",
                   "% Here be dragons.\n",
                   "-module(" ++ modulename ++ ").\n",
                   "-compile(export_all).",             -- export all top-level functions
                   "-compile(nowarn_unused_function).", -- don't tell me off for not using a fun
                   "-compile(nowarn_unused_vars).",     -- don't tell me off for not using a variable
                   "-compile(nowarn_shadow_vars).",     -- I think DUpdate makes me shadow variables.
                   ""]
  where modulename = takeWhile (/='.') filename

-- Erlang Codegen State Monad
data ErlCodeGen = ECG {
  forms :: [String],
  decls :: [(Name,DDecl)],
  records :: [(Name,Int)],
  locals :: [[(Int, String)]],
  nextLocal :: [Int]
  } deriving (Show)

initECG :: ErlCodeGen
initECG = ECG [] [] [] [] [0]

type ErlCG = StateT ErlCodeGen (ErrorT String IO)

runErlCodeGen :: ([(Name, DDecl)] -> ErlCG ()) -> [(Name,DDecl)] -> IO (Either String ErlCodeGen)
runErlCodeGen ecg ddecls = runErrorT $ execStateT (ecg ddecls) initECG

emitForm :: String -> ErlCG ()
emitForm form = modify (\ecg -> ecg {forms = forms ecg ++ [form]})

emitDecl :: Name -> DDecl -> ErlCG ()
emitDecl n d@(DFun _ _ _) = modify (\ecg -> ecg {decls = decls ecg ++ [(n,d)]})
emitDecl _ _ = return ()

addRecord :: Name -> Int -> ErlCG ()
addRecord name arity = do records <- gets records
                          let records1 = insertBy (comparing fst) (name,arity) records
                          modify (\ecg -> ecg { records = records1 })

isRecord :: Name -> ErlCG Bool
isRecord name = do records <- gets records
                   case lookup name records of
                    Just _  -> return True
                    Nothing -> return False

-- We want to be able to compare the length of constructor arguments
-- to the arity of that record constructor, so this returns the
-- arity. If we can't find the record, then -1 is alright to return,
-- as no list will have that length.
recordArity :: Name -> ErlCG Int
recordArity name = do records <- gets records
                      case lookup name records of
                       Just i  -> return i
                       Nothing -> return (-1)

-- OMG Coping with Local variables is a struggle.
--
-- locals is the mapping from (Loc n) to the variable name of that
-- binding. nextLocal is the largest (Loc n) seen at that level of the
-- stack.

popScope :: ErlCG ()
popScope = modify (\ecg -> ecg { locals = tail (locals ecg),
                                 nextLocal = tail (nextLocal ecg) })

pushScope :: ErlCG ()
pushScope = modify (\ecg -> ecg { locals = []:(locals ecg),
                                  nextLocal = 0:(nextLocal ecg) })

pushScopeWithVars :: [String] -> ErlCG ()
pushScopeWithVars vars = modify (\ecg -> ecg { locals = (zipWith (,) [0..] vars):(locals ecg),
                                               nextLocal = (length vars) + (head (nextLocal ecg)):(nextLocal ecg) })

getVar :: LVar -> ErlCG String
getVar (Glob name) = return $ erlVar name
getVar (Loc i)     = do ls <- gets locals
                        case lookup i (concat ls) of
                         Just var -> return var
                         Nothing  -> throwError "Local Not Found. Oh Fuck."

getNextLocal :: ErlCG String
getNextLocal = do x <- head <$> gets nextLocal
                  modify (\ecg -> ecg {nextLocal = (1+) `toHead` nextLocal ecg})
                  return ("Local" ++ show x)

newLocal :: LVar -> ErlCG String
newLocal (Glob name) = throwError "newLocal on a Global variable"
newLocal (Loc i)     = do getter <- getNextLocal
                          modify (\ecg -> ecg {locals = ((i,getter):) `toHead` locals ecg})
                          return getter

-- This applies f to the head of the list, leaving the tail
-- unchanged. It will blow up if you give it an empty list.
toHead :: (a -> a) -> [a] -> [a]
toHead f (x:xs) = (f x):xs

{- The Code Generator:

Takes in a Name and a DDecl, and hopefully emits some Forms.

Some Definitions:

- Form : the syntax for top-level Erlang function in an Erlang module

- Module : a group of Erlang functions

- Record : Erlang has n-arity tuples, and they're used for
datastructures, in which case it's usual for the first element in the
tuple to be the name of the datastructure. We'll be using these for
most constructors.

More when I realise they're needed.

This first time I'm going to avoid special-casing anything. Later
there are some things I want to special-case to make Erlang interop
easier: - Lists; - 0-Arity Constructors to Atoms (DONE); - Pairs; -
Booleans; - Case Statements that operate only on arguments (erlang has
special syntax for this); - Using Library functions, not Idris' ones;

We emit constructors first, in the hope that we don't need to use all
the constructor functions in favour of just building tuples immediately.
-}

generateErl :: [(Name,DDecl)] -> ErlCG ()
generateErl alldecls = let (ctors, funs) = (isCtor . snd) `partition` alldecls
                       in do mapM_ (uncurry emitDecl) (ctors++funs)
                             mapM_ (\(_,DConstructor name _ arity) -> generateCtor name arity) ctors
                             mapM_ (\(_,DFun name args exp)        -> generateFun name args exp) funs
  where isCtor (DFun _ _ _) = False
        isCtor (DConstructor _ _ _) = True

generateFun :: Name -> [Name] -> DExp -> ErlCG ()
generateFun name args exp = do pushScopeWithVars args'
                               erlExp <- generateExp exp
                               emitForm ((erlAtom name) ++ "(" ++ argsStr ++ ") -> "++ erlExp ++".")
                               popScope
  where args' = map erlVar args
        argsStr = ", " `intercalate` args'

generateCtor :: Name -> Int -> ErlCG ()
generateCtor name arity = addRecord name arity

generateExp :: DExp -> ErlCG String
generateExp (DV lv)            = getVar lv

generateExp (DApp _ name exprs)  = do arity <- recordArity name
                                      exprs' <- mapM generateExp exprs
                                      case arity == length exprs of
                                       True ->  return $ erlTuple ((erlAtom name):exprs')
                                       False -> return $ erlCall (erlAtom name) exprs'

generateExp (DLet _ exp inExp) = do exp' <- generateExp exp
                                    local <- getNextLocal
                                    inExp' <- generateExp inExp
                                    return $ local ++ " = begin " ++ exp' ++ "end, "++ inExp'

generateExp (DUpdate name exp) = throwError "TODO: DUpdate... but you have a few ideas"

-- The tuple is 1-indexed, and its first field is the name of the
-- constructor, which is why we have to add 2 to the index we're given
-- in order to do the correct lookup.
generateExp (DProj exp n)      = do exp' <- generateExp exp
                                    return $ erlCall "element" [show (n+2), exp']

generateExp (DC _ _ name []) = do arity <- recordArity name
                                  case arity of
                                   0 -> return (erlAtom name)
                                   _ -> throwError ("Constructor with wrong arity: 0 vs required " ++ show arity)

generateExp (DC _ _ name exprs) = do arity <- recordArity name
                                     case arity == length exprs of
                                      True -> do exprs' <- mapM generateExp exprs
                                                 return $ erlTuple ((erlAtom name):exprs')
                                      False -> throwError ("Consturctor with wrong arity:" ++ show (length exprs) ++ " vs required " ++ show arity)

generateExp (DCase _  exp alts) = generateCase exp alts
generateExp (DChkCase exp alts) = generateCase exp alts

generateExp (DConst c)          = generateConst c

generateExp (DOp op exprs)      = do exprs' <- mapM generateExp exprs
                                     generatePrim op exprs'

generateExp DNothing            = return "\'nothing\'"
generateExp (DError str)        = return ("erlang:error("++ show str ++")")

generateExp (DForeign lang ty name args) = generateForeign lang ty name args

-- Case Statements
generateCase :: DExp -> [DAlt] -> ErlCG String
generateCase expr alts = do expr' <- generateExp expr
                            alts' <- mapM generateCaseAlt alts
                            return $ "case " ++ expr' ++ " of\n" ++ (";\n" `intercalate` alts') ++ "\nend"

-- Case Statement Clauses
generateCaseAlt :: DAlt -> ErlCG String
generateCaseAlt (DConCase _ name [] expr)   = do pushScope
                                                 expr' <- generateExp expr
                                                 popScope
                                                 return $ (erlAtom name) ++ " -> " ++ expr'
generateCaseAlt (DConCase _ name args expr) = do let args' = map erlVar args
                                                 pushScopeWithVars args'
                                                 expr' <- generateExp expr
                                                 popScope
                                                 return $ "{"++ (", " `intercalate` ((erlAtom name):args')) ++ "} -> " ++ expr'
generateCaseAlt (DConstCase const expr)     = do const' <- generateConst const
                                                 pushScope
                                                 expr' <- generateExp expr
                                                 popScope
                                                 return $ const' ++ " -> " ++ expr'
generateCaseAlt (DDefaultCase expr)         = do pushScope
                                                 expr' <- generateExp expr
                                                 popScope
                                                 return $ "_Default -> " ++ expr'


-- Foreign Calls
generateForeign :: FLang -> FType -> String -> [(FType,DExp)] -> ErlCG String
generateForeign lang ty fn args = throwError $ "Foreign call: " ++ (", " `intercalate` [show lang, show ty, show fn, show args])

-- Some Notes on Constants
--
-- - All Erlang's numbers are arbitrary precision. The VM copes with
-- what size they really are underneath, including whether they're a
-- float.
--
-- - Characters are just numbers. However, there's also a nice syntax
-- for them, which is $<char> is the number of that character. So, if
-- the char is printable, it's best to use the $<char> notation than
-- the number.
--
-- - Strings are actually lists of numbers. However the nicer syntax
-- is within double quotes. Some things will fail, but it's just
-- easier to assume all strings are full of printables, if they're
-- constant.
generateConst :: Const -> ErlCG String
generateConst (I i)  = return $ show i
generateConst (BI i) = return $ show i
generateConst (Fl f) = return $ show f
generateConst (Ch c) | isPrint c = return ['$',c]
                | otherwise = return $ show (fromEnum c)
generateConst (Str s) = return $ show s

generateConst (AType a)  = throwError "TODO: AType: No Idea"
generateConst StrType    = throwError "TODO: StrType: No Idea"
generateConst BufferType = throwError "TODO: BufferType: No Idea"
generateConst PtrType    = throwError "TODO: PtrType"
generateConst ManagedPtrType = throwError "TODO: ManagedPtrType"
generateConst VoidType   = throwError "TODO: VoidType"
generateConst Forgot     = throwError "TODO: Forgot"

generateConst c  = do liftIO . putStrLn $ "No Const: " ++ (show c)
                      throwError "TODO: Finish generateConst for buffer types"

-- Some Notes on Primitive Operations
--
-- - Official Docs:
-- http://www.erlang.org/doc/reference_manual/expressions.html#id78907
-- http://www.erlang.org/doc/reference_manual/expressions.html#id78646
--
-- - Oh look, because we only have one number type, all mathematical
-- operations are really easy. The only thing to note is this: `div`
-- is explicitly integer-only, so is worth using whenever integer
-- division is asked for (to avoid everything becoming floaty). '/' is
-- for any number, so we just use that on floats.
--
--
generatePrim :: PrimFn -> [String] -> ErlCG String
generatePrim (LPlus _)       [x,y] = return $ erlBinOp "+" x y
generatePrim (LMinus _)      [x,y] = return $ erlBinOp "-" x y
generatePrim (LTimes _)      [x,y] = return $ erlBinOp "*" x y
generatePrim (LUDiv _)       [x,y] = return $ erlBinOp "div" x y
generatePrim (LSDiv ATFloat) [x,y] = return $ erlBinOp "/" x y
generatePrim (LSDiv _)       [x,y] = return $ erlBinOp "div" x y
generatePrim (LURem _)       [x,y] = return $ erlBinOp "rem" x y
generatePrim (LSRem _)       [x,y] = return $ erlBinOp "rem" x y
generatePrim (LAnd _)        [x,y] = return $ erlBinOp "band" x y
generatePrim (LOr _)         [x,y] = return $ erlBinOp "bor" x y
generatePrim (LXOr _)        [x,y] = return $ erlBinOp "bxor" x y
generatePrim (LCompl _)      [x]   = return $ erlBinOp "bnot" "" x  -- hax
generatePrim (LSHL _)        [x,y] = return $ erlBinOp "bsl" x y
generatePrim (LASHR _)       [x,y] = return $ erlBinOp "bsr" x y
generatePrim (LLSHR _)       [x,y] = return $ erlBinOp "bsr" x y -- using an arithmetic shift when we should use a logical one.
generatePrim (LEq _)         [x,y] = return $ erlBinOp "=:=" x y
generatePrim (LLt _)         [x,y] = return $ erlBinOp "<" x y
generatePrim (LLe _)         [x,y] = return $ erlBinOp "=<" x y
generatePrim (LGt _)         [x,y] = return $ erlBinOp ">" x y
generatePrim (LGe _)         [x,y] = return $ erlBinOp ">=" x y
generatePrim (LChInt _)      [x]   = return $ x -- Chars are just Integers anyway.
generatePrim (LPrintStr)     [x]   = return $ erlCallMFA "io" "put_chars" [x]

generatePrim p a = do liftIO . putStrLn $ "No Primitive: " ++ show p ++ " on " ++ show (length a) ++ " args."
                      throwError "generatePrim: Unknown Op, or incorrect arity"

erlBinOp :: String -> String -> String -> String
erlBinOp op a b = concat ["(",a," ",op," ",b,")"]

erlBif1 :: String -> String -> String
erlBif1 name arg = erlCall name [arg]

-- Bifs always ... something
erlBif2 :: String -> String -> String -> String
erlBif2 name a1 a2 = erlCall name [a1,a2]

-- Erlang Atoms can contain quite a lot of chars, so let's see how they cope
erlAtom :: Name -> String
erlAtom n = strAtom (showCG n)

strAtom :: String -> String
strAtom s = "\'" ++ concatMap atomchar s ++ "\'"
  where atomchar x | x == '\'' = "\\'"
                   | x == '\\' = "\\\\"
                   | x == '.' = "_"
                   | x `elem` "{}" = ""
                   | isPrint x = [x]
                   | otherwise = "_" ++ show (fromEnum x) ++ "_"


-- Erlang Variables have a more restricted set of chars, and must
-- start with a capital letter (erased can start with an underscore)
erlVar :: Name -> String
erlVar NErased = "_Erased"
erlVar n = capitalize (concatMap varchar (showCG n))
  where varchar x | isAlpha x = [x]
                  | isDigit x = [x]
                  | x == '_'  = "_"
                  | x `elem` "{}" = "" -- I hate the {}, and they fuck up everything.
                  | otherwise = "_" ++ show (fromEnum x) ++ "_"
        capitalize (x:xs) | isUpper x = x:xs
                          | isLower x = (toUpper x):xs
                          | otherwise = 'V':x:xs

erlTuple :: [String] -> String
erlTuple elems = "{" ++ (", " `intercalate` elems) ++ "}"

erlCall :: String -> [String] -> String
erlCall fun args = fun ++ "("++ (", " `intercalate` args) ++")"

erlCallMFA :: String -> String -> [String] -> String
erlCallMFA mod fun args = mod ++ ":" ++ erlCall fun args
